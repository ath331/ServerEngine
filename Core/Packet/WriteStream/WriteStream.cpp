///////////////////////////////////////////////////////////////////////////
// @brief     WriteStream
///////////////////////////////////////////////////////////////////////////


#include "pch.h"
#include "WriteStream.h"


#define WRITE( data ) m_buffer.insert( m_buffer.end(), reinterpret_cast<char*>( &data ), reinterpret_cast<char*>( &data ) + sizeof( data ) );
#define WRITE_STR( data ) m_buffer.insert( m_buffer.end(), data.c_str(), data.c_str() + data.length() );


///////////////////////////////////////////////////////////////////////////
// @brief     버퍼의 주소를 반환한다.
///////////////////////////////////////////////////////////////////////////
char* WriteStream::GetBuffer()
{
	return m_buffer.data();
}

///////////////////////////////////////////////////////////////////////////
// @brief     버퍼의 사이즈를 반환한다.
///////////////////////////////////////////////////////////////////////////
int WriteStream::GetSize()
{
	return m_buffer.size();
}

///////////////////////////////////////////////////////////////////////////
// @brief     data를 size만큼 직렬화 한다.
///////////////////////////////////////////////////////////////////////////
void WriteStream::operator<<( bool data )
{
	int num = data ? 1 : 0;
	WRITE( num );
}

///////////////////////////////////////////////////////////////////////////
// @brief     data를 size만큼 직렬화 한다.
///////////////////////////////////////////////////////////////////////////
void WriteStream::operator<<( int data )
{
	WRITE( data );
}

///////////////////////////////////////////////////////////////////////////
// @brief     data를 size만큼 직렬화 한다.
///////////////////////////////////////////////////////////////////////////
void WriteStream::operator<<( const string& data )
{
	int strSize = data.length();
	*this << strSize;

	WRITE_STR( data );
}

///////////////////////////////////////////////////////////////////////////
// @brief     data를 size만큼 직렬화 한다.
///////////////////////////////////////////////////////////////////////////
void WriteStream::operator<<( float data )
{
	WRITE( data );
}
