///////////////////////////////////////////////////////////////////////////
// @brief     PacketFactory
///////////////////////////////////////////////////////////////////////////


#include "pch.h"
#include "PacketFactory.h"
#include "../Packet/PacketFactory/PacketCreateList.h"


///////////////////////////////////////////////////////////////////////////
// @brief     생성자
///////////////////////////////////////////////////////////////////////////
PacketFactory::PacketFactory()
	: m_packetBaseSize( sizeof( PacketBase ) )
{
}

///////////////////////////////////////////////////////////////////////////
// @brief     수신 데이터의 크기가 PacketBase가 되는지 체크한다.
///////////////////////////////////////////////////////////////////////////
bool PacketFactory::IsPacketBaseSize( int receiveSize )
{
	return m_packetBaseSize <= receiveSize;
}

///////////////////////////////////////////////////////////////////////////
// @brief     data에서 패킷사이즈 만큼을 추출한다.
///////////////////////////////////////////////////////////////////////////
void PacketFactory::_SubData( char* data, char* src, int size )
{
	/// data에서 패킷 사이즈만 큼 src에 복사
	/// 잘린 데이터만큼 앞으로 이동
	
	string s( data );

	size = 1;

	memmove( data, data + size, size );

	string s2( data );
}

///////////////////////////////////////////////////////////////////////////
// @brief     패킷을 생성하여 반환한다.
///////////////////////////////////////////////////////////////////////////
PacketBase* PacketFactory::MakePacket( char* data, int receiveSize )
{
	char* src = nullptr;
	_SubData( data, src, m_packetBaseSize );

	ReaderStream readerStream( src );

	PacketBase* packet = new PacketBase; // TODO : 스마트 포인터로 바꾸기
	packet->Deserialize( readerStream );

	return CreatePacket( (EPacketId)( packet->GetPktId() ) );
}